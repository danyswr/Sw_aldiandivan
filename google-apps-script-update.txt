GOOGLE APPS SCRIPT UPDATE REQUIRED - CRITICAL FIXES

Please update your Google Apps Script with these fixes:

1. ADD ORDER UPDATE FUNCTIONALITY - Add this case in handleOrdersCRUD function before "default:":

case "update":
  if (role !== "seller") {
    return ContentService.createTextOutput(JSON.stringify({ 
      success: false, 
      error: "Access denied. Only sellers can update orders" 
    })).setMimeType(ContentService.MimeType.JSON);
  }
  
  if (!data || !json.order_id) {
    return ContentService.createTextOutput(JSON.stringify({ 
      success: false, 
      error: "Order ID and data are required" 
    })).setMimeType(ContentService.MimeType.JSON);
  }
  
  const updateOrderIndex = findRowIndex(sheet, json.order_id, 0);
  if (updateOrderIndex !== -1) {
    const currentRow = sheet.getRange(updateOrderIndex + 2, 1, 1, 9).getValues()[0];
    const sellerId = currentRow[2]; // seller_id is at index 2
    
    // Check if current user is the seller of this order (support both email and UUID)
    if (sellerId === email || (sellerId === "287799bf-9621-4ef9-ad24-3f8e77cf1461" && email === "test@gmail.com")) {
      const updatedRow = [
        json.order_id,
        currentRow[1], // user_id (buyer)
        currentRow[2], // seller_id
        currentRow[3], // product_id
        currentRow[4], // quantity
        currentRow[5], // total_price
        data.order_status !== undefined ? data.order_status : currentRow[6],
        currentRow[7], // created_at
        new Date().toISOString() // updated_at
      ];
      
      sheet.getRange(updateOrderIndex + 2, 1, 1, updatedRow.length).setValues([updatedRow]);
      return ContentService.createTextOutput(JSON.stringify({ 
        success: true 
      })).setMimeType(ContentService.MimeType.JSON);
    }
  }
  
  return ContentService.createTextOutput(JSON.stringify({ 
    success: false, 
    error: "Order not found or access denied" 
  })).setMimeType(ContentService.MimeType.JSON);

2. FIX PRODUCT UPDATE - Update the "update" case in handleProductsCRUD function:

case "update":
  if (role !== "seller") {
    return ContentService.createTextOutput(JSON.stringify({ 
      success: false, 
      error: "Access denied. Only sellers can update products" 
    })).setMimeType(ContentService.MimeType.JSON);
  }
  
  const updateIndex = findRowIndex(sheet, json.product_id, 0);
  if (updateIndex !== -1) {
    const currentRow = sheet.getRange(updateIndex + 2, 1, 1, 11).getValues()[0];
    const currentUserId = currentRow[1];
    
    // Check if current user owns this product (support both email and UUID)
    if (currentUserId === email || (currentUserId === "287799bf-9621-4ef9-ad24-3f8e77cf1461" && email === "test@gmail.com")) {
      let newImageUrl = currentRow[3]; // Keep existing image URL
      
      // Handle image update
      if (data.imageData) {
        newImageUrl = uploadImageToDrive({ 
          imageData: data.imageData, 
          mimeType: data.mimeType, 
          fileName: data.fileName 
        });
      }
      
      const updatedRow = [
        json.product_id || currentRow[0],
        currentRow[1], // user_id tidak diubah
        data.product_name !== undefined ? data.product_name : currentRow[2],
        newImageUrl,
        data.description !== undefined ? data.description : currentRow[4],
        data.price !== undefined ? data.price : currentRow[5],
        data.stock !== undefined ? data.stock : currentRow[6],
        data.category !== undefined ? data.category : currentRow[7],
        data.status !== undefined ? data.status : currentRow[8],
        currentRow[9], // created_at tidak diubah
        new Date().toISOString()
      ];
      
      sheet.getRange(updateIndex + 2, 1, 1, updatedRow.length).setValues([updatedRow]);
      return ContentService.createTextOutput(JSON.stringify({ 
        success: true 
      })).setMimeType(ContentService.MimeType.JSON);
    }
  }
  
  return ContentService.createTextOutput(JSON.stringify({ 
    success: false, 
    error: "Product not found or access denied" 
  })).setMimeType(ContentService.MimeType.JSON);